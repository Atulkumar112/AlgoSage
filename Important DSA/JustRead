▪️If an input array is sorted then
- Binary search
- Two pointers

▪️If asked for all permutations/subsets then
- Backtracking

▪️If given a tree then
- DFS
- BFS

▪️If given a graph then
- DFS
- BFS

▪️If given a linked list then
- Two pointers

▪️If recursion is banned then
- Stack

▪️If must solve in-place then
- Swap corresponding values
- Store one or more different values in the same pointer

▪️If asked for maximum/minumum subarray/subset/options then
- Dynamic programming

▪️If asked for top/least K items then
- Heap

▪️If asked for common strings then
- Map
- Trie

▪️If asked for find minimum k integer within  k times
- Binary Search

▪️Else
- Map/Set for O(1) time & O(n) space
- Sort input for O(nlogn) time and O(1) space


//-----------------------------------------------------------------------------------------------------------------------------
𝟭𝟬 𝗚𝗼𝗹𝗱𝗲𝗻 𝗥𝘂𝗹𝗲𝘀 𝗳𝗼𝗿 𝗦𝗼𝗹𝘃𝗶𝗻𝗴 𝗮 𝗖𝗼𝗱𝗶𝗻𝗴 𝗤𝘂𝗲𝘀𝘁𝗶𝗼𝗻 𝗶𝗻 𝗮𝗻 Interview ❤️

♦️ If we are dealing with top/maximum/minimum/closest ‘K' elements among 'N' elements, we will be using a Heap.

♦️ If the given input is a sorted array or a list, we will either be using Binray Search or the Two Pointers.

♦️ If we need to try all combinations (or permutations) of the input, we can either use Backtracking or Breadth First Search.

♦️ Most of the questions related to Trees or Graphs can be solved either through Breadth First Search or Depth First Search.

♦️ Every recursive solution can be converted to an iterative solution using a Stack.

♦️ For a problem involving arrays, if there exists a solution in O(n^2)time and O(1) space, there must exist two other solutions: 1) Using a HashMap or a Set for O(n) time and O(n) space, 2) Using sorting for O(n log n) time and O(1) space.

♦️ If a problem is asking for optimization (e.g., maximization or minimization), we will be using Dynamic Programming.

♦️ If we need to find some common substring among a set of strings, we will be using a HashMap or a Trie.

♦️ If we need to search/manipulate a bunch of strings, Trie will be the best data structure.


♦️ If the problem is related to a LinkedList and we can't use extra space, then use the Fast & Slow Pointer approach.
